traditional_web_app:
  name: "Traditional Web Application"
  description: "Aplicação web server-side rendering (PHP, ASP.NET, JSP, etc.)"
  
  automation_plan:
    env:
      contexts:
        - name: "traditional-web"
          url: "https://webapp.example.com"
          includePaths:
            - "https://webapp.example.com/.*"
          excludePaths:
            - ".*\\.(css|js|png|jpg|gif|ico|pdf)$"
            - ".*/static/.*"
            - ".*/assets/.*"
          authentication:
            method: "form"
            loginUrl: "https://webapp.example.com/login"
            username: "${AUTH_USER}"
            password: "${AUTH_PASS}"
            usernameParameter: "email"
            passwordParameter: "password"

    jobs:
      - type: "spider"
        parameters:
          maxDuration: 15
          maxDepth: 5
          parseComments: true
          parseSitemapXml: true
      
      - type: "activeScan"
        parameters:
          maxScanDurationInMins: 30
          policy: "traditional-web-policy"
          
      - type: "activeScan-config"
        parameters:
          enabledRules:
            - "40018" # SQL Injection
            - "40012" # XSS Reflected
            - "40014" # XSS Stored
            - "7" # Path Traversal
            - "6" # Remote File Inclusion
            - "90020" # Command Injection
          disabledRules:
            - "40026" # DOM XSS (menos relevante)
            - "10096" # Timestamp
            - "10094" # Base64


react_spa:
  name: "React Single Page Application"
  description: "SPA React com API REST backend"
  
  automation_plan:
    env:
      addons:
        - id: "ajaxspider"
        - id: "selenium"
        - id: "domxss"
      
      contexts:
        - name: "react-spa"
          url: "https://app.example.com"
          includePaths:
            - "https://app.example.com/.*"
            - "https://api.example.com/.*"
          excludePaths:
            - ".*\\.chunk\\.js$"
            - ".*\\.map$"
            - ".*node_modules.*"
            - ".*static/js/.*"
          authentication:
            method: "bearer"
            bearerToken: "${JWT_TOKEN}"

    jobs:
      - type: "spider"
        parameters:
          maxDuration: 5
          maxDepth: 3
          
      - type: "ajaxSpider"
        parameters:
          maxDuration: 20
          maxCrawlDepth: 8
          numberOfBrowsers: 2
          clickDefaultElems: true
          randomInputs: true
          
      - type: "activeScan-config"
        parameters:
          enabledRules:
            - "40026" # DOM XSS (muito importante para SPAs)
            - "40012" # XSS Reflected
            - "10055" # CSP
            - "40040" # CORS
            - "40018" # SQL Injection (API)
          disabledRules:
            - "10015" # Cache headers
            - "10020" # X-Frame-Options


rest_api:
  name: "REST API"
  description: "API REST sem interface web"
  
  automation_plan:
    env:
      contexts:
        - name: "rest-api"
          url: "https://api.example.com"
          includePaths:
            - "https://api.example.com/v1/.*"
            - "https://api.example.com/v2/.*"
          excludePaths:
            - ".*/health.*"
            - ".*/metrics.*"
            - ".*/docs.*"
          authentication:
            method: "bearer"
            bearerToken: "${API_TOKEN}"

    jobs:
      - type: "openapi"
        parameters:
          apiUrl: "https://api.example.com/swagger.json"
          targetUrl: "https://api.example.com"
          
      - type: "spider"
        parameters:
          maxDuration: 10
          parseComments: false
          
      - type: "activeScan-config"
        parameters:
          enabledRules:
            - "40018" # SQL Injection
            - "90020" # Command Injection
            - "7" # Path Traversal
            - "40039" # Web Cache Deception
            - "90019" # Server Side Include
          disabledRules:
            - "40026" # DOM XSS
            - "40012" # XSS Reflected
            - "40014" # XSS Stored
            - "10020" # X-Frame-Options
            - "10021" # X-Content-Type-Options

ecommerce_app:
  name: "E-commerce Application"
  description: "Aplicação de e-commerce com carrinho e pagamento"
  
  automation_plan:
    env:
      contexts:
        - name: "ecommerce"
          url: "https://shop.example.com"
          includePaths:
            - "https://shop.example.com/.*"
          excludePaths:
            - ".*/payment/callback.*" # Evitar webhooks de pagamento
            - ".*/payment/process.*"  # Evitar processar pagamentos reais
            - ".*/admin/.*"           # Evitar área administrativa
            - ".*\\.(css|js|png|jpg)$"
          authentication:
            method: "form"
            loginUrl: "https://shop.example.com/login"
            username: "${CUSTOMER_USER}"
            password: "${CUSTOMER_PASS}"

    jobs:
      - type: "spider"
        parameters:
          maxDuration: 20
          maxDepth: 6
          parseComments: true
          
      - type: "ajaxSpider"
        parameters:
          maxDuration: 15
          inScopeOnly: true
          
      - type: "activeScan-config"
        parameters:
          enabledRules:
            - "40018" # SQL Injection (crítico para e-commerce)
            - "40012" # XSS (proteção contra skimming)
            - "40014" # XSS Stored
            - "7" # Path Traversal
            - "40013" # Session Fixation
            - "10011" # Insecure Cookies
            - "90033" # Loosely Scoped Cookie
          
          # Configurações específicas para e-commerce
          ruleConfigs:
            - id: "40018" # SQL Injection
              threshold: "HIGH"
              strength: "HIGH"
            - id: "40012" # XSS
              threshold: "MEDIUM"
              strength: "HIGH"


mobile_backend:
  name: "Mobile App Backend API"
  description: "API backend para aplicativo móvel"
  
  automation_plan:
    env:
      contexts:
        - name: "mobile-api"
          url: "https://mobile-api.example.com"
          includePaths:
            - "https://mobile-api.example.com/api/.*"
          excludePaths:
            - ".*/health.*"
            - ".*/ping.*"
          authentication:
            method: "bearer"
            bearerToken: "${MOBILE_API_TOKEN}"
          globalHeaders:
            - name: "User-Agent"
              value: "MobileApp/1.0 (iOS)"
            - name: "Accept"
              value: "application/json"

    jobs:
      - type: "openapi"
        parameters:
          apiUrl: "https://mobile-api.example.com/api-docs"
          
      - type: "activeScan-config"
        parameters:
          enabledRules:
            - "40018" # SQL Injection
            - "90020" # Command Injection
            - "7" # Path Traversal
            - "40039" # Web Cache Deception
            - "90019" # Server Side Include
            - "40013" # Session Issues
          
          # Foco em segurança de API
          ruleConfigs:
            - id: "40018"
              threshold: "HIGH"
              strength: "HIGH"
            - id: "90020"
              threshold: "HIGH"
              strength: "MEDIUM"


wordpress_site:
  name: "WordPress Site"
  description: "Site WordPress com plugins e temas customizados"
  
  automation_plan:
    env:
      contexts:
        - name: "wordpress"
          url: "https://blog.example.com"
          includePaths:
            - "https://blog.example.com/.*"
          excludePaths:
            - ".*/wp-admin/admin-ajax.php" # Evitar AJAX interno
            - ".*/wp-content/uploads/.*"   # Arquivos de mídia
            - ".*\\.(css|js|png|jpg|gif)$"
          authentication:
            method: "form"
            loginUrl: "https://blog.example.com/wp-login.php"
            username: "${WP_USER}"
            password: "${WP_PASS}"
            usernameParameter: "log"
            passwordParameter: "pwd"

    jobs:
      - type: "spider"
        parameters:
          maxDuration: 25
          maxDepth: 7
          parseComments: true
          parseRobotsTxt: true
          
      - type: "activeScan-config"
        parameters:
          enabledRules:
            - "40018" # SQL Injection
            - "40012" # XSS
            - "40014" # XSS Stored
            - "7" # Path Traversal
            - "6" # Remote File Inclusion
            - "90020" # Command Injection
            - "90019" # Server Side Include
          
          # WordPress específico
          additionalTests:
            - "wp-config exposure"
            - "plugin vulnerabilities"
            - "theme vulnerabilities"


microservices:
  name: "Microservices Architecture"
  description: "Múltiplos serviços independentes"
  
  automation_plan:
    env:
      contexts:
        - name: "user-service"
          url: "https://users.microservices.example.com"
          includePaths:
            - "https://users.microservices.example.com/.*"
          authentication:
            method: "bearer"
            bearerToken: "${USER_SERVICE_TOKEN}"
            
        - name: "order-service"
          url: "https://orders.microservices.example.com"
          includePaths:
            - "https://orders.microservices.example.com/.*"
          authentication:
            method: "bearer"
            bearerToken: "${ORDER_SERVICE_TOKEN}"
            
        - name: "payment-service"
          url: "https://payments.microservices.example.com"
          includePaths:
            - "https://payments.microservices.example.com/.*"
          authentication:
            method: "bearer"
            bearerToken: "${PAYMENT_SERVICE_TOKEN}"

    jobs:
      # Scan de cada serviço separadamente
      - type: "openapi"
        parameters:
          context: "user-service"
          apiUrl: "https://users.microservices.example.com/swagger.json"
          
      - type: "openapi"
        parameters:
          context: "order-service"
          apiUrl: "https://orders.microservices.example.com/swagger.json"
          
      - type: "openapi"
        parameters:
          context: "payment-service"
          apiUrl: "https://payments.microservices.example.com/swagger.json"


graphql_app:
  name: "GraphQL Application"
  description: "Aplicação usando GraphQL API"
  
  automation_plan:
    env:
      addons:
        - id: "graphql"
      
      contexts:
        - name: "graphql-app"
          url: "https://graphql.example.com"
          includePaths:
            - "https://graphql.example.com/.*"
          authentication:
            method: "bearer"
            bearerToken: "${GRAPHQL_TOKEN}"

    jobs:
      - type: "graphql"
        parameters:
          endpoint: "https://graphql.example.com/graphql"
          schemaUrl: "https://graphql.example.com/graphql?sdl"
          
      - type: "activeScan-config"
        parameters:
          enabledRules:
            - "40018" # SQL Injection
            - "90020" # Command Injection
            - "7" # Path Traversal
            - "40039" # Web Cache Deception
          
          
          graphqlTests:
            - "introspection"
            - "depth_limit"
            - "query_complexity"
            - "injection_in_variables"


environments:
  development:
    scanDuration: 60 # minutos
    threshold: "LOW"
    strength: "HIGH"
    includeInformational: true
    
  staging:
    scanDuration: 45
    threshold: "MEDIUM"
    strength: "MEDIUM"
    includeInformational: false
    
  production:
    scanDuration: 30
    threshold: "HIGH"
    strength: "LOW"
    includeInformational: false
    maxConcurrentScans: 2

# =============================================================================
# SCRIPTS DE USO
# =============================================================================
usage_examples:
  traditional_web:
    command: |
      TARGET_URL=https://webapp.example.com \
      AUTH_USER=testuser \
      AUTH_PASS=testpass \
      ./run_zap_automation.sh standard traditional_web_config.yaml
      
  spa:
    command: |
      SPA_BASE_URL=https://app.example.com \
      API_BASE_URL=https://api.example.com \
      JWT_TOKEN=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... \
      ./run_zap_automation.sh spa react_spa_config.yaml
      
  rest_api:
    command: |
      TARGET_URL=https://api.example.com \
      API_TOKEN=bearer_token_here \
      ./run_zap_automation.sh standard rest_api_config.yaml
      
  ecommerce:
    command: |
      TARGET_URL=https://shop.example.com \
      CUSTOMER_USER=customer@example.com \
      CUSTOMER_PASS=password123 \
      ./run_zap_automation.sh standard ecommerce_config.yaml
      
  docker_compose_spa:
    command: |
      # Usando Docker Compose para SPA com Selenium
      TARGET_URL=https://app.example.com \
      docker-compose --profile zap-with-grid up