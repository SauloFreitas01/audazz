# Docker Compose para OWASP ZAP com Selenium Grid
# Arquivo: docker-compose.yaml
# Versão: 1.0

version: '3.8'

services:
  # Selenium Hub
  selenium-hub:
    image: selenium/hub:4.15.0-20231129
    container_name: selenium-hub
    ports:
      - "4442-4444:4442-4444"
    environment:
      - GRID_MAX_SESSION=4
      - GRID_BROWSER_TIMEOUT=300
      - GRID_TIMEOUT=300
    networks:
      - zap-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chrome Node
  selenium-node-chrome:
    image: selenium/node-chrome:4.15.0-20231129
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=2
      - NODE_MAX_SESSION=2
    networks:
      - zap-network
    scale: 2

  # Firefox Node (opcional)
  selenium-node-firefox:
    image: selenium/node-firefox:4.15.0-20231129
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=1
      - NODE_MAX_SESSION=1
    networks:
      - zap-network
    profiles: ["full-grid"] # Usar com: docker-compose --profile full-grid up

  # OWASP ZAP
  zap:
    image: owasp/zap2docker-stable:2.14.0
    container_name: owasp-zap
    depends_on:
      selenium-hub:
        condition: service_healthy
    volumes:
      - ./:/zap/wrk/:rw
      - ./zap_automation_plan.yaml:/zap/wrk/automation.yaml:ro
      - ./reports:/zap/wrk/reports:rw
      - ./config:/zap/wrk/config:rw
    environment:
      # Configurações do ZAP
      - TARGET_URL=${TARGET_URL}
      - AUTH_USER=${AUTH_USER:-}
      - AUTH_PASS=${AUTH_PASS:-}
      - LOGIN_URL=${LOGIN_URL:-}
      - SPA_BASE_URL=${SPA_BASE_URL:-}
      - API_BASE_URL=${API_BASE_URL:-}
      - SELENIUM_GRID_URL=http://selenium-hub:4444/wd/hub
      - timestamp=${timestamp:-$(date +%Y%m%d_%H%M%S)}
      
      # Configurações de Java/ZAP
      - JAVA_OPTS=-Xmx2g -Djava.security.egd=file:/dev/./urandom
      - ZAP_PORT=8080
    networks:
      - zap-network
    profiles: ["zap-with-grid"]
    command: >
      zap.sh -cmd -autorun /zap/wrk/automation.yaml
      -config api.addrs.addr.name=.*
      -config api.addrs.addr.regex=true
      -config api.key=${ZAP_API_KEY:-zap-api-key}

  # ZAP Standalone (sem Selenium)
  zap-standalone:
    image: owasp/zap2docker-stable:2.14.0
    container_name: owasp-zap-standalone
    volumes:
      - ./:/zap/wrk/:rw
      - ./zap_automation_plan.yaml:/zap/wrk/automation.yaml:ro
      - ./reports:/zap/wrk/reports:rw
    environment:
      - TARGET_URL=${TARGET_URL}
      - AUTH_USER=${AUTH_USER:-}
      - AUTH_PASS=${AUTH_PASS:-}
      - LOGIN_URL=${LOGIN_URL:-}
      - timestamp=${timestamp:-$(date +%Y%m%d_%H%M%S)}
      - JAVA_OPTS=-Xmx1g -Djava.security.egd=file:/dev/./urandom
    networks:
      - zap-network
    profiles: ["zap-only"]
    command: >
      zap.sh -cmd -autorun /zap/wrk/automation.yaml

  # Grafana para visualização de métricas (opcional)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: zap-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - zap-network
    profiles: ["monitoring"]

  # InfluxDB para armazenar métricas (opcional)
  influxdb:
    image: influxdb:2.7
    container_name: zap-influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=zap_metrics
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=adminpassword
      - INFLUXDB_USER=zapuser
      - INFLUXDB_USER_PASSWORD=zappassword
    volumes:
      - influxdb-storage:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - zap-network
    profiles: ["monitoring"]

  # Nginx para servir relatórios HTML (opcional)
  nginx-reports:
    image: nginx:alpine
    container_name: zap-nginx-reports
    ports:
      - "8080:80"
    volumes:
      - ./reports:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - zap-network
    profiles: ["web-reports"]
    depends_on:
      - zap

networks:
  zap-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  grafana-storage:
    driver: local
  influxdb-storage:
    driver: local  
  influxdb-config:
    driver: local

# =============================================================================
# PROFILES DE EXECUÇÃO
# =============================================================================
# 
# Uso dos profiles:
#
# 1. ZAP apenas (varredura simples):
#    docker-compose --profile zap-only up
#
# 2. ZAP com Selenium Grid (para SPAs):
#    docker-compose --profile zap-with-grid up
#
# 3. Grid completo (Chrome + Firefox):
#    docker-compose --profile zap-with-grid --profile full-grid up
#
# 4. Com monitoramento (Grafana + InfluxDB):
#    docker-compose --profile zap-with-grid --profile monitoring up
#
# 5. Com servidor web para relatórios:
#    docker-compose --profile zap-only --profile web-reports up
#
# 6. Setup completo:
#    docker-compose --profile zap-with-grid --profile full-grid --profile monitoring --profile web-reports up
#
# =============================================================================