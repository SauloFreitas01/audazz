
services:
  # Main DAST monitoring application
  dast-monitor:
    build: .
    container_name: dast-monitor
    restart: unless-stopped
    volumes:
      - ./dast_config.yaml:/app/dast_config.yaml:ro
      - ./reports:/app/reports:rw
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For running ZAP containers
    environment:
      - GRAFANA_API_KEY=${GRAFANA_API_KEY:-}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - SIEM_WEBHOOK_URL=${SIEM_WEBHOOK_URL:-}
      - ADMIN_API_TOKEN=${ADMIN_API_TOKEN:-admin-token-change-me}
      - READONLY_API_TOKEN=${READONLY_API_TOKEN:-readonly-token-change-me}
    ports:
      - "8080:8080"  # API endpoint
      - "9090:9090"  # Metrics endpoint
    networks:
      - dast-network
      - monitoring
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: dast-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=dast_monitor
      - POSTGRES_USER=dast_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure-password-change-me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - dast-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dast_user -d dast_monitor"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and task queuing
  redis:
    image: redis:7-alpine
    container_name: dast-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password-change-me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dast-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis-password-change-me}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for dashboards and visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: dast-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin-change-me}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - dast-network
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: dast-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"  # Different port to avoid conflict with app metrics
    networks:
      - dast-network
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB alternative to Prometheus (optional)
  influxdb:
    image: influxdb:2.7-alpine
    container_name: dast-influxdb
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD:-influx-admin-password}
      - DOCKER_INFLUXDB_INIT_ORG=dast-monitoring
      - DOCKER_INFLUXDB_INIT_BUCKET=dast-metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN:-influx-token-change-me}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - dast-network
      - monitoring
    profiles:
      - influxdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for SIEM integration (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: dast-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - dast-network
    profiles:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Elasticsearch visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: dast-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    networks:
      - dast-network
    depends_on:
      - elasticsearch
    profiles:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: dast-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx:rw
    ports:
      - "80:80"
      - "443:443"
    networks:
      - dast-network
    depends_on:
      - dast-monitor
      - grafana
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Subdomain discovery service
  subdomain-discovery:
    build:
      context: .
      dockerfile: Dockerfile.subdomain
    container_name: dast-subdomain-discovery
    restart: unless-stopped
    volumes:
      - ./data:/app/data:rw
      - ./tools:/app/tools:ro
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://dast_user:${POSTGRES_PASSWORD:-secure-password-change-me}@postgres:5432/dast_monitor
    networks:
      - dast-network
    depends_on:
      - redis
      - postgres
    profiles:
      - discovery

  # Cleanup service for old reports and logs
  cleanup:
    build:
      context: .
      dockerfile: Dockerfile.cleanup
    container_name: dast-cleanup
    restart: unless-stopped
    volumes:
      - ./reports:/app/reports:rw
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    environment:
      - RETENTION_DAYS=${RETENTION_DAYS:-90}
      - CLEANUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    networks:
      - dast-network

# Networks
networks:
  dast-network:
    driver: bridge
    name: dast-network
  monitoring:
    driver: bridge
    name: monitoring
    external: true

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  influxdb_data:
    driver: local
  elasticsearch_data:
    driver: local