# OWASP ZAP Automation Makefile
# Vers√£o: 1.0
# Descri√ß√£o: Comandos simplificados para execu√ß√£o do ZAP

# =============================================================================
# CONFIGURA√á√ïES PADR√ÉO
# =============================================================================
.DEFAULT_GOAL := help
.PHONY: help setup clean scan-quick scan-standard scan-spa scan-api report summary

# Vari√°veis padr√£o
ZAP_VERSION ?= 2.14.0
TARGET_URL ?= https://example.com
ENVIRONMENT ?= development
REPORTS_DIR ?= ./reports
CONFIG_DIR ?= ./config

# Cores para output
BLUE := \033[34m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
NC := \033[0m

# =============================================================================
# ALVOS PRINCIPAIS
# =============================================================================

help: ## Mostrar esta ajuda
	@echo "$(BLUE)üîí OWASP ZAP Automation Framework$(NC)"
	@echo ""
	@echo "$(YELLOW)Uso: make [ALVO] [VARI√ÅVEIS]$(NC)"
	@echo ""
	@echo "$(GREEN)ALVOS PRINCIPAIS:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(BLUE)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(GREEN)VARI√ÅVEIS:$(NC)"
	@echo "  $(BLUE)TARGET_URL$(NC)     URL da aplica√ß√£o (obrigat√≥rio)"
	@echo "  $(BLUE)ZAP_VERSION$(NC)    Vers√£o do ZAP (padr√£o: $(ZAP_VERSION))"
	@echo "  $(BLUE)ENVIRONMENT$(NC)    Ambiente (development/staging/production)"
	@echo "  $(BLUE)AUTH_USER$(NC)      Usu√°rio para autentica√ß√£o"
	@echo "  $(BLUE)AUTH_PASS$(NC)      Senha para autentica√ß√£o"
	@echo ""
	@echo "$(GREEN)EXEMPLOS:$(NC)"
	@echo "  $(YELLOW)make scan-quick TARGET_URL=https://staging.com$(NC)"
	@echo "  $(YELLOW)make scan-spa TARGET_URL=https://app.com AUTH_USER=test$(NC)"
	@echo "  $(YELLOW)make scan-standard TARGET_URL=https://site.com ENVIRONMENT=production$(NC)"

setup: ## Configurar ambiente e depend√™ncias
	@echo "$(BLUE)üõ†  Configurando ambiente ZAP...$(NC)"
	@chmod +x run_zap_automation.sh
	@mkdir -p $(REPORTS_DIR) $(CONFIG_DIR)
	@chmod -R 777 $(REPORTS_DIR)
	@docker --version || (echo "$(RED)‚ùå Docker n√£o encontrado$(NC)" && exit 1)
	@docker-compose --version || (echo "$(RED)‚ùå Docker Compose n√£o encontrado$(NC)" && exit 1)
	@echo "$(GREEN)‚úÖ Ambiente configurado com sucesso$(NC)"

pull-images: ## Download das imagens Docker necess√°rias
	@echo "$(BLUE)üì• Baixando imagens Docker...$(NC)"
	@docker pull owasp/zap2docker-stable:$(ZAP_VERSION)
	@docker pull selenium/hub:4.15.0-20231129
	@docker pull selenium/node-chrome:4.15.0-20231129
	@echo "$(GREEN)‚úÖ Imagens baixadas com sucesso$(NC)"

validate-env: ## Validar vari√°veis de ambiente
	@echo "$(BLUE)üîç Validando configura√ß√£o...$(NC)"
	@if [ -z "$(TARGET_URL)" ]; then \
		echo "$(RED)‚ùå TARGET_URL √© obrigat√≥rio$(NC)"; \
		echo "$(YELLOW)Exemplo: make scan-quick TARGET_URL=https://example.com$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Configura√ß√£o v√°lida$(NC)"
	@echo "  Target URL: $(TARGET_URL)"
	@echo "  ZAP Version: $(ZAP_VERSION)"
	@echo "  Environment: $(ENVIRONMENT)"

# =============================================================================
# TIPOS DE VARREDURA
# =============================================================================

scan-quick: validate-env ## Varredura r√°pida (5-15 min) - ideal para CI/CD
	@echo "$(BLUE)üöÄ Iniciando varredura r√°pida...$(NC)"
	@TARGET_URL=$(TARGET_URL) \
	 ZAP_VERSION=$(ZAP_VERSION) \
	 ENVIRONMENT=$(ENVIRONMENT) \
	 ./run_zap_automation.sh quick
	@$(MAKE) summary

scan-standard: validate-env ## Varredura padr√£o completa (20-45 min)
	@echo "$(BLUE)üîç Iniciando varredura padr√£o...$(NC)"
	@TARGET_URL=$(TARGET_URL) \
	 ZAP_VERSION=$(ZAP_VERSION) \
	 ENVIRONMENT=$(ENVIRONMENT) \
	 AUTH_USER=$(AUTH_USER) \
	 AUTH_PASS=$(AUTH_PASS) \
	 LOGIN_URL=$(LOGIN_URL) \
	 ./run_zap_automation.sh standard
	@$(MAKE) summary

scan-spa: validate-env ## Varredura para Single Page Applications (30-60 min)
	@echo "$(BLUE)‚öõÔ∏è  Iniciando varredura SPA...$(NC)"
	@TARGET_URL=$(TARGET_URL) \
	 SPA_BASE_URL=$(SPA_BASE_URL) \
	 API_BASE_URL=$(API_BASE_URL) \
	 ZAP_VERSION=$(ZAP_VERSION) \
	 ENVIRONMENT=$(ENVIRONMENT) \
	 AUTH_USER=$(AUTH_USER) \
	 AUTH_PASS=$(AUTH_PASS) \
	 JWT_TOKEN=$(JWT_TOKEN) \
	 ./run_zap_automation.sh spa
	@$(MAKE) summary

scan-api: validate-env ## Varredura para APIs REST/GraphQL (15-30 min)
	@echo "$(BLUE)üåê Iniciando varredura de API...$(NC)"
	@TARGET_URL=$(TARGET_URL) \
	 API_TOKEN=$(API_TOKEN) \
	 SWAGGER_URL=$(SWAGGER_URL) \
	 ZAP_VERSION=$(ZAP_VERSION) \
	 ENVIRONMENT=$(ENVIRONMENT) \
	 ./run_zap_automation.sh standard rest_api_config.yaml
	@$(MAKE) summary

scan-full: validate-env ## Varredura completa e profunda (1-3 horas)
	@echo "$(BLUE)üéØ Iniciando varredura completa...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Esta varredura pode demorar v√°rias horas$(NC)"
	@TARGET_URL=$(TARGET_URL) \
	 ZAP_VERSION=$(ZAP_VERSION) \
	 ENVIRONMENT=$(ENVIRONMENT) \
	 ./run_zap_automation.sh full
	@$(MAKE) summary

# =============================================================================
# DOCKER COMPOSE
# =============================================================================

start-selenium: ## Iniciar Selenium Grid para SPAs
	@echo "$(BLUE)üï∑Ô∏è  Iniciando Selenium Grid...$(NC)"
	@./run_zap_automation.sh setup-selenium
	@echo "$(GREEN)‚úÖ Selenium Grid dispon√≠vel em http://localhost:4444$(NC)"

stop-selenium: ## Parar Selenium Grid
	@echo "$(BLUE)üõë Parando Selenium Grid...$(NC)"
	@./run_zap_automation.sh cleanup-selenium
	@echo "$(GREEN)‚úÖ Selenium Grid removido$(NC)"

start-monitoring: ## Iniciar stack de monitoramento (Grafana + InfluxDB)
	@echo "$(BLUE)üìä Iniciando stack de monitoramento...$(NC)"
	@docker-compose --profile monitoring up -d
	@echo "$(GREEN)‚úÖ Monitoramento dispon√≠vel:$(NC)"
	@echo "  Grafana: http://localhost:3000 (admin/admin123)"
	@echo "  InfluxDB: http://localhost:8086"

stop-monitoring: ## Parar stack de monitoramento
	@echo "$(BLUE)üõë Parando stack de monitoramento...$(NC)"
	@docker-compose --profile monitoring down
	@echo "$(GREEN)‚úÖ Stack de monitoramento removida$(NC)"

scan-with-selenium: validate-env start-selenium ## Scan SPA com Selenium Grid automatizado
	@echo "$(BLUE)ü§ñ Scan SPA com Selenium Grid automatizado...$(NC)"
	@TARGET_URL=$(TARGET_URL) \
	 docker-compose --profile zap-with-grid up --abort-on-container-exit
	@$(MAKE) stop-selenium
	@$(MAKE) summary

# =============================================================================
# RELAT√ìRIOS E M√âTRICAS
# =============================================================================

summary: ## Mostrar resumo dos √∫ltimos resultados
	@echo "$(BLUE)üìã Gerando resumo dos resultados...$(NC)"
	@./run_zap_automation.sh summary

report: ## Processar relat√≥rios para Grafana
	@echo "$(BLUE)üìä Processando relat√≥rios para monitoramento...$(NC)"
	@./run_zap_automation.sh process-reports

metrics: ## Gerar m√©tricas completas com Python
	@echo "$(BLUE)üìà Processando m√©tricas avan√ßadas...$(NC)"
	@python3 process_zap_metrics.py --summary --output-grafana --output-junit

send-slack: ## Enviar notifica√ß√£o Slack (requer SLACK_WEBHOOK)
	@if [ -z "$(SLACK_WEBHOOK)" ]; then \
		echo "$(RED)‚ùå SLACK_WEBHOOK n√£o definido$(NC)"; \
		exit 1; \
	fi
	@python3 process_zap_metrics.py --slack-webhook $(SLACK_WEBHOOK)

check-gates: ## Verificar quality gates de seguran√ßa
	@echo "$(BLUE)üö™ Verificando quality gates...$(NC)"
	@MIN_SECURITY_SCORE=$(MIN_SECURITY_SCORE) \
	 MAX_MEDIUM_RISK=$(MAX_MEDIUM_RISK) \
	 MAX_TOTAL_ALERTS=$(MAX_TOTAL_ALERTS) \
	 python3 process_zap_metrics.py --check-gates

# =============================================================================
# UTILIT√ÅRIOS
# =============================================================================

clean: ## Limpar relat√≥rios antigos e containers
	@echo "$(BLUE)üßπ Limpando ambiente...$(NC)"
	@rm -rf $(REPORTS_DIR)/*.json $(REPORTS_DIR)/*.html $(REPORTS_DIR)/*.xml
	@docker container prune -f
	@docker image prune -f
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da$(NC)"

clean-all: clean stop-selenium stop-monitoring ## Limpeza completa (relat√≥rios + containers + redes)
	@docker-compose down --volumes --remove-orphans
	@docker network prune -f
	@echo "$(GREEN)‚úÖ Limpeza completa realizada$(NC)"

logs: ## Mostrar logs dos √∫ltimos scans
	@echo "$(BLUE)üìú Logs dos containers ZAP:$(NC)"
	@docker logs owasp-zap-automation 2>/dev/null || echo "$(YELLOW)Nenhum container ZAP ativo$(NC)"
	@docker logs selenium-hub 2>/dev/null || echo "$(YELLOW)Nenhum Selenium Hub ativo$(NC)"

status: ## Verificar status dos servi√ßos
	@echo "$(BLUE)üìä Status dos servi√ßos:$(NC)"
	@echo ""
	@echo "$(GREEN)Docker:$(NC)"
	@docker version --format "  Vers√£o: {{.Server.Version}}" 2>/dev/null || echo "  $(RED)‚ùå N√£o dispon√≠vel$(NC)"
	@echo ""
	@echo "$(GREEN)Containers ZAP:$(NC)"
	@docker ps --filter "name=zap" --format "  {{.Names}} - {{.Status}}" || echo "  $(YELLOW)Nenhum container ZAP rodando$(NC)"
	@echo ""
	@echo "$(GREEN)Selenium Grid:$(NC)"
	@docker ps --filter "name=selenium" --format "  {{.Names}} - {{.Status}}" || echo "  $(YELLOW)Selenium Grid n√£o est√° rodando$(NC)"
	@echo ""
	@echo "$(GREEN)Relat√≥rios dispon√≠veis:$(NC)"
	@ls -la $(REPORTS_DIR)/*.json 2>/dev/null | head -5 || echo "  $(YELLOW)Nenhum relat√≥rio encontrado$(NC)"

# =============================================================================
# ALVOS PARA DIFERENTES TIPOS DE APLICA√á√ÉO
# =============================================================================

scan-wordpress: validate-env ## Varredura espec√≠fica para WordPress
	@echo "$(BLUE)üìù Varredura WordPress...$(NC)"
	@TARGET_URL=$(TARGET_URL) \
	 WP_USER=$(WP_USER) \
	 WP_PASS=$(WP_PASS) \
	 ./run_zap_automation.sh standard wordpress_config.yaml

scan-ecommerce: validate-env ## Varredura para e-commerce
	@echo "$(BLUE)üõí Varredura E-commerce...$(NC)"
	@TARGET_URL=$(TARGET_URL) \
	 CUSTOMER_USER=$(CUSTOMER_USER) \
	 CUSTOMER_PASS=$(CUSTOMER_PASS) \
	 APP_TYPE=ecommerce \
	 ./run_zap_automation.sh standard

scan-microservices: validate-env ## Varredura para arquitetura de microservi√ßos
	@echo "$(BLUE)üèóÔ∏è  Varredura Microservi√ßos...$(NC)"
	@USER_SERVICE_URL=$(USER_SERVICE_URL) \
	 ORDER_SERVICE_URL=$(ORDER_SERVICE_URL) \
	 PAYMENT_SERVICE_URL=$(PAYMENT_SERVICE_URL) \
	 ./run_zap_automation.sh standard microservices_config.yaml

# =============================================================================
# PIPELINES CI/CD
# =============================================================================

ci-scan: validate-env ## Scan otimizado para CI/CD com quality gates
	@echo "$(BLUE)üîÑ Iniciando scan CI/CD...$(NC)"
	@$(MAKE) scan-quick
	@$(MAKE) check-gates
	@$(MAKE) metrics

ci-full-pipeline: validate-env ## Pipeline completo CI/CD com notifica√ß√µes
	@echo "$(BLUE)üöÄ Pipeline CI/CD completo...$(NC)"
	@$(MAKE) scan-quick
	@$(MAKE) metrics
	@$(MAKE) check-gates
	@if [ -n "$(SLACK_WEBHOOK)" ]; then $(MAKE) send-slack; fi

# =============================================================================
# AMBIENTES ESPEC√çFICOS
# =============================================================================

scan-dev: ## Scan para ambiente de desenvolvimento (mais agressivo)
	@$(MAKE) scan-standard ENVIRONMENT=development

scan-staging: ## Scan para ambiente de staging (balanceado)
	@$(MAKE) scan-standard ENVIRONMENT=staging

scan-prod: ## Scan para ambiente de produ√ß√£o (conservador)
	@$(MAKE) scan-quick ENVIRONMENT=production

# =============================================================================
# MONITORAMENTO E RELAT√ìRIOS
# =============================================================================

start-full-monitoring: ## Iniciar monitoramento completo (Grafana + Prometheus + InfluxDB)
	@echo "$(BLUE)üìä Iniciando stack completa de monitoramento...$(NC)"
	@docker-compose --profile monitoring --profile web-reports up -d
	@echo "$(GREEN)‚úÖ Stack de monitoramento iniciada:$(NC)"
	@echo "  Grafana: http://localhost:3000"
	@echo "  InfluxDB: http://localhost:8086"
	@echo "  Relat√≥rios Web: http://localhost:8080"

report-html: ## Gerar relat√≥rio HTML naveg√°vel
	@echo "$(BLUE)üìÑ Iniciando servidor de relat√≥rios...$(NC)"
	@docker-compose --profile web-reports up -d
	@echo "$(GREEN)‚úÖ Relat√≥rios dispon√≠veis em: http://localhost:8080$(NC)"

export-junit: ## Exportar resultados no formato JUnit XML
	@echo "$(BLUE)üì§ Exportando para JUnit XML...$(NC)"
	@python3 process_zap_metrics.py --output-junit zap-junit-results.xml
	@echo "$(GREEN)‚úÖ JUnit XML gerado: $(REPORTS_DIR)/zap-junit-results.xml$(NC)"

# =============================================================================
# DESENVOLVIMENTO E DEBUG
# =============================================================================

debug-scan: validate-env ## Executar scan com debug habilitado
	@echo "$(BLUE)üêõ Scan com debug...$(NC)"
	@DEBUG=true TARGET_URL=$(TARGET_URL) ./run_zap_automation.sh standard

test-selenium: ## Testar conectividade com Selenium Grid
	@echo "$(BLUE)üß™ Testando Selenium Grid...$(NC)"
	@$(MAKE) start-selenium
	@sleep 10
	@curl -f http://localhost:4444/wd/hub/status || echo "$(RED)‚ùå Selenium Grid n√£o responde$(NC)"
	@$(MAKE) stop-selenium

validate-config: ## Validar arquivos de configura√ß√£o YAML
	@echo "$(BLUE)‚úÖ Validando configura√ß√µes YAML...$(NC)"
	@python3 -c "import yaml; yaml.safe_load(open('zap_automation_plan.yaml'))" && echo "$(GREEN)‚úÖ zap_automation_plan.yaml v√°lido$(NC)" || echo "$(RED)‚ùå zap_automation_plan.yaml inv√°lido$(NC)"
	@python3 -c "import yaml; yaml.safe_load(open('zap_spa_automation.yaml'))" && echo "$(GREEN)‚úÖ zap_spa_automation.yaml v√°lido$(NC)" || echo "$(RED)‚ùå zap_spa_automation.yaml inv√°lido$(NC)"

# =============================================================================
# EXEMPLOS PR√ÅTICOS
# =============================================================================

example-react: ## Exemplo: Scan de aplica√ß√£o React
	@echo "$(YELLOW)üîç Exemplo: Aplica√ß√£o React$(NC)"
	@$(MAKE) scan-spa \
		TARGET_URL=https://app.example.com \
		SPA_BASE_URL=https://app.example.com \
		API_BASE_URL=https://api.example.com \
		AUTH_USER=testuser \
		JWT_TOKEN=eyJ0eXAiOiJKV1Q...

example-api: ## Exemplo: Scan de API REST
	@echo "$(YELLOW)üîç Exemplo: API REST$(NC)"
	@$(MAKE) scan-api \
		TARGET_URL=https://api.example.com \
		API_TOKEN=sk-1234567890 \
		SWAGGER_URL=https://api.example.com/swagger.json

example-ecommerce: ## Exemplo: Scan de e-commerce
	@echo "$(YELLOW)üîç Exemplo: E-commerce$(NC)"
	@$(MAKE) scan-ecommerce \
		TARGET_URL=https://shop.example.com \
		CUSTOMER_USER=customer@example.com \
		CUSTOMER_PASS=password123

example-wordpress: ## Exemplo: Scan de WordPress
	@echo "$(YELLOW)üîç Exemplo: WordPress$(NC)"
	@$(MAKE) scan-wordpress \
		TARGET_URL=https://blog.example.com \
		WP_USER=admin \
		WP_PASS=admin123

# =============================================================================
# INTEGRA√á√ÉO CONT√çNUA
# =============================================================================

ci-setup: setup pull-images validate-config ## Setup completo para CI/CD
	@echo "$(GREEN)‚úÖ Ambiente CI/CD configurado$(NC)"

ci-quick-check: ## Check r√°pido para pull requests
	@echo "$(BLUE)‚ö° Quick check para PR...$(NC)"
	@$(MAKE) scan-quick
	@$(MAKE) check-gates MIN_SECURITY_SCORE=80 MAX_MEDIUM_RISK=3

ci-nightly: ## Scan noturno completo
	@echo "$(BLUE)üåô Scan noturno completo...$(NC)"
	@$(MAKE) scan-standard
	@$(MAKE) metrics
	@if [ -n "$(SLACK_WEBHOOK)" ]; then $(MAKE) send-slack; fi

ci-release: ## Scan para release (mais rigoroso)
	@echo "$(BLUE)üöÄ Scan para release...$(NC)"
	@$(MAKE) scan-standard ENVIRONMENT=production
	@$(MAKE) check-gates MIN_SECURITY_SCORE=90 MAX_MEDIUM_RISK=1 MAX_TOTAL_ALERTS=10

# =============================================================================
# BENCHMARKS E PERFORMANCE
# =============================================================================

benchmark: ## Executar benchmark de performance do ZAP
	@echo "$(BLUE)‚è±Ô∏è  Executando benchmark...$(NC)"
	@echo "$(YELLOW)Scan 1: Aplica√ß√£o pequena$(NC)"
	@time $(MAKE) scan-quick TARGET_URL=https://httpbin.org
	@echo ""
	@echo "$(YELLOW)Scan 2: Com Selenium$(NC)" 
	@time $(MAKE) scan-with-selenium TARGET_URL=https://httpbin.org
	@echo "$(GREEN)‚úÖ Benchmark conclu√≠do$(NC)"

performance-test: ## Teste de performance com m√∫ltiplos targets
	@echo "$(BLUE)üèéÔ∏è  Teste de performance...$(NC)"
	@for url in https://httpbin.org https://jsonplaceholder.typicode.com https://postman-echo.com; do \
		echo "$(YELLOW)Testando: $url$(NC)"; \
		time $(MAKE) scan-quick TARGET_URL=$url; \
		echo ""; \
	done

# =============================================================================
# MANUTEN√á√ÉO
# =============================================================================

update-images: ## Atualizar imagens Docker
	@echo "$(BLUE)üîÑ Atualizando imagens...$(NC)"
	@docker pull owasp/zap2docker-stable:latest
	@docker pull selenium/hub:latest
	@docker pull selenium/node-chrome:latest
	@echo "$(GREEN)‚úÖ Imagens atualizadas$(NC)"

backup-reports: ## Backup dos relat√≥rios
	@echo "$(BLUE)üíæ Criando backup dos relat√≥rios...$(NC)"
	@timestamp=$(date +%Y%m%d_%H%M%S); \
	tar -czf "zap-reports-backup-$timestamp.tar.gz" $(REPORTS_DIR)/; \
	echo "$(GREEN)‚úÖ Backup criado: zap-reports-backup-$timestamp.tar.gz$(NC)"

health-check: ## Verificar sa√∫de do sistema
	@echo "$(BLUE)üè• Verifica√ß√£o de sa√∫de do sistema...$(NC)"
	@echo ""
	@echo "$(GREEN)Docker:$(NC)"
	@docker system df
	@echo ""
	@echo "$(GREEN)Espa√ßo em disco:$(NC)"
	@df -h $(REPORTS_DIR)
	@echo ""
	@echo "$(GREEN)Mem√≥ria dispon√≠vel:$(NC)"
	@free -h
	@echo ""
	@echo "$(GREEN)√öltimos relat√≥rios:$(NC)"
	@ls -lah $(REPORTS_DIR)/ | head -10

# =============================================================================
# RECEITAS COMBINADAS
# =============================================================================

full-spa-pipeline: ## Pipeline completo para SPA (setup + scan + monitoramento)
	@echo "$(BLUE)üéØ Pipeline completo para SPA...$(NC)"
	@$(MAKE) setup
	@$(MAKE) start-selenium
	@$(MAKE) start-monitoring
	@$(MAKE) scan-spa
	@$(MAKE) metrics
	@$(MAKE) report-html
	@echo "$(GREEN)‚úÖ Pipeline SPA conclu√≠do$(NC)"
	@echo "  Relat√≥rios: http://localhost:8080"
	@echo "  Monitoramento: http://localhost:3000"

security-audit: validate-env ## Auditoria completa de seguran√ßa
	@echo "$(BLUE)üîê Auditoria completa de seguran√ßa...$(NC)"
	@$(MAKE) scan-full
	@$(MAKE) metrics
	@$(MAKE) export-junit
	@$(MAKE) summary
	@echo "$(GREEN)‚úÖ Auditoria de seguran√ßa conclu√≠da$(NC)"

quick-dev-check: ## Check r√°pido para desenvolvimento
	@echo "$(BLUE)‚ö° Check r√°pido de desenvolvimento...$(NC)"
	@$(MAKE) scan-quick ENVIRONMENT=development
	@$(MAKE) summary

# =============================================================================
# VARI√ÅVEIS DE AMBIENTE PARA QUALITY GATES
# =============================================================================

# Definir valores padr√£o se n√£o estiverem definidos
MIN_SECURITY_SCORE ?= 70
MAX_MEDIUM_RISK ?= 5
MAX_TOTAL_ALERTS ?= 20

# =============================================================================
# TARGETS DE INFORMA√á√ÉO
# =============================================================================

show-config: ## Mostrar configura√ß√£o atual
	@echo "$(BLUE)‚öôÔ∏è  Configura√ß√£o atual:$(NC)"
	@echo "  TARGET_URL: $(TARGET_URL)"
	@echo "  ZAP_VERSION: $(ZAP_VERSION)"
	@echo "  ENVIRONMENT: $(ENVIRONMENT)"
	@echo "  REPORTS_DIR: $(REPORTS_DIR)"
	@echo "  CONFIG_DIR: $(CONFIG_DIR)"
	@echo "  MIN_SECURITY_SCORE: $(MIN_SECURITY_SCORE)"
	@echo "  MAX_MEDIUM_RISK: $(MAX_MEDIUM_RISK)"
	@echo "  MAX_TOTAL_ALERTS: $(MAX_TOTAL_ALERTS)"
	@echo ""
	@echo "$(GREEN)Vari√°veis opcionais:$(NC)"
	@echo "  AUTH_USER: $(if $(AUTH_USER),$(AUTH_USER),n√£o definido)"
	@echo "  SPA_BASE_URL: $(if $(SPA_BASE_URL),$(SPA_BASE_URL),n√£o definido)"
	@echo "  API_BASE_URL: $(if $(API_BASE_URL),$(API_BASE_URL),n√£o definido)"
	@echo "  SLACK_WEBHOOK: $(if $(SLACK_WEBHOOK),configurado,n√£o definido)"

version: ## Mostrar vers√µes dos componentes
	@echo "$(BLUE)üì¶ Vers√µes dos componentes:$(NC)"
	@echo "  ZAP Version: $(ZAP_VERSION)"
	@docker --version || echo "  Docker: $(RED)n√£o instalado$(NC)"
	@docker-compose --version || echo "  Docker Compose: $(RED)n√£o instalado$(NC)"
	@python3 --version || echo "  Python: $(RED)n√£o instalado$(NC)"

list-reports: ## Listar relat√≥rios dispon√≠veis
	@echo "$(BLUE)üìã Relat√≥rios dispon√≠veis:$(NC)"
	@find $(REPORTS_DIR) -name "*.json" -o -name "*.html" -o -name "*.xml" | sort -r | head -10

# =============================================================================
# TARGETS DE DESENVOLVIMENTO
# =============================================================================

dev-setup: setup ## Setup completo para desenvolvimento
	@echo "$(BLUE)üë®‚Äçüíª Setup para desenvolvimento...$(NC)"
	@$(MAKE) pull-images
	@$(MAKE) validate-config
	@pip3 install pyyaml requests influxdb-client 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Algumas depend√™ncias Python podem estar faltando$(NC)"
	@echo "$(GREEN)‚úÖ Ambiente de desenvolvimento configurado$(NC)"

test-configs: ## Testar todas as configura√ß√µes
	@echo "$(BLUE)üß™ Testando configura√ß√µes...$(NC)"
	@$(MAKE) validate-config
	@$(MAKE) test-selenium
	@echo "$(GREEN)‚úÖ Todos os testes passaram$(NC)"

dry-run: validate-env ## Simula√ß√£o sem executar scan real
	@echo "$(BLUE)üé≠ Simula√ß√£o de execu√ß√£o (dry-run)...$(NC)"
	@echo "  Comando que seria executado:"
	@echo "  TARGET_URL=$(TARGET_URL) ./run_zap_automation.sh standard"
	@echo ""
	@echo "  Configura√ß√µes que seriam utilizadas:"
	@$(MAKE) show-config

# =============================================================================
# HELP ADICIONAL
# =============================================================================

help-examples: ## Mostrar exemplos detalhados de uso
	@echo "$(BLUE)üìö Exemplos Detalhados de Uso$(NC)"
	@echo ""
	@echo "$(GREEN)1. Scan b√°sico de aplica√ß√£o web:$(NC)"
	@echo "   make scan-standard TARGET_URL=https://myapp.com"
	@echo ""
	@echo "$(GREEN)2. Scan SPA React com autentica√ß√£o:$(NC)"
	@echo "   make scan-spa TARGET_URL=https://app.com \\"
	@echo "                 AUTH_USER=testuser \\"
	@echo "                 AUTH_PASS=testpass \\"
	@echo "                 SPA_BASE_URL=https://app.com \\"
	@echo "                 API_BASE_URL=https://api.com"
	@echo ""
	@echo "$(GREEN)3. Pipeline CI/CD completo:$(NC)"
	@echo "   make ci-full-pipeline TARGET_URL=https://staging.com \\"
	@echo "                         SLACK_WEBHOOK=https://hooks.slack.com/..."
	@echo ""
	@echo "$(GREEN)4. Auditoria de seguran√ßa completa:$(NC)"
	@echo "   make security-audit TARGET_URL=https://prod.com \\"
	@echo "                       ENVIRONMENT=production"
	@echo ""
	@echo "$(GREEN)5. Monitoramento cont√≠nuo:$(NC)"
	@echo "   make start-full-monitoring"
	@echo "   make scan-standard TARGET_URL=https://app.com"
	@echo "   # Visualizar em http://localhost:3000"

help-ci: ## Ajuda para integra√ß√£o CI/CD
	@echo "$(BLUE)üîÑ Integra√ß√£o CI/CD$(NC)"
	@echo ""
	@echo "$(GREEN)Jenkins Pipeline:$(NC)"
	@echo "  stage('Security Scan') {"
	@echo "    steps {"
	@echo "      sh 'make ci-scan TARGET_URL=\$TARGET_URL'"
	@echo "    }"
	@echo "  }"
	@echo ""
	@echo "$(GREEN)GitLab CI:$(NC)"
	@echo "  security_scan:"
	@echo "    script:"
	@echo "      - make ci-scan TARGET_URL=\$CI_ENVIRONMENT_URL"
	@echo "    artifacts:"
	@echo "      reports:"
	@echo "        junit: reports/*.xml"
	@echo ""
	@echo "$(GREEN)GitHub Actions:$(NC)"
	@echo "  - name: Security Scan"
	@echo "    run: make ci-scan TARGET_URL=\${{ secrets.TARGET_URL }}"

help-troubleshooting: ## Ajuda para resolu√ß√£o de problemas
	@echo "$(BLUE)üîß Resolu√ß√£o de Problemas$(NC)"
	@echo ""
	@echo "$(GREEN)Problemas comuns:$(NC)"
	@echo ""
	@echo "$(YELLOW)1. 'Target URL n√£o acess√≠vel':$(NC)"
	@echo "   ‚Üí Verificar: make validate-env"
	@echo "   ‚Üí Testar: curl -I \$TARGET_URL"
	@echo ""
	@echo "$(YELLOW)2. 'Selenium Grid n√£o responde':$(NC)"
	@echo "   ‚Üí Reiniciar: make stop-selenium && make start-selenium"
	@echo "   ‚Üí Testar: make test-selenium"
	@echo ""
	@echo "$(YELLOW)3. 'Mem√≥ria insuficiente':$(NC)"
	@echo "   ‚Üí Verificar: make health-check"
	@echo "   ‚Üí Limpar: make clean-all"
	@echo ""
	@echo "$(YELLOW)4. 'Falha na autentica√ß√£o':$(NC)"
	@echo "   ‚Üí Debug: make debug-scan TARGET_URL=\$TARGET_URL"
	@echo "   ‚Üí Logs: make logs"

# =============================================================================
# SHORTCUTS
# =============================================================================

s: scan-standard ## Shortcut para scan-standard
q: scan-quick ## Shortcut para scan-quick  
spa: scan-spa ## Shortcut para scan-spa
api: scan-api ## Shortcut para scan-api
r: summary ## Shortcut para summary
c: clean ## Shortcut para clean
h: help ## Shortcut para help